service: aws-nodejs

provider:
  name: aws
  stage: ${opt:stage, self:custom.defaultStage}
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"
  environment:
    AWS_ACCESS_KEY_ID: test
    AWS_SECRET_ACCESS_KEY: test

plugins:
  - serverless-prune-plugin
  - serverless-webpack
  - serverless-localstack
  - serverless-cloudside-plugin
  # - serverless-offline-sqs
  # - serverless-offline-sns
  - serverless-offline

custom:
  defaultStage: local
  localstack:
    # debug: true
    autostart: true
    stages: [local]
    lambda:
      # mountCode: True
    docker:
      sudo: False
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: "2012-11-05"
    endpoint: http://0.0.0.0:9324
    region: us-east-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
  serverless-offline-sns:
    port: 4002
    debug: true
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules: true
    packager: "npm"
  serverless-offline:
    httpPort: 3333
    lambdaPort: 3334

resources:
  Resources:
    TestQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: test
    TestTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: test
        Subscription:
          - Protocol: SQS
            Endpoint: !Ref TestQueue
    MessageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: messages
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: message
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: message
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    TestBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: test

functions:
  receiveMessage:
    handler: src/handlers/default.receiveMessage
    events:
      - sns:
          arn:
            Fn::GetAtt: [TestTopic, Arn]
          topicName: test
  receiveQueue:
    handler: src/handlers/default.receiveQueue
    environment:
      TEST_TOPIC: !Ref TestTopic
    events:
      - sqs:
          arn:
            Fn::GetAtt: [TestQueue, Arn]
          batchSize: 1
  queueMessage:
    handler: src/handlers/default.queueMessage
    environment:
      TEST_QUEUE_URL: !Ref TestQueue
    events:
      - http:
          method: any
          path: message
  store:
    handler: src/handlers/default.store
    environment:
      TEST_BUCKET: !Ref TestBucket
    events:
      - http:
          method: any
          path: store
  restore:
    handler: src/handlers/default.restore
    environment:
      TEST_BUCKET: !Ref TestBucket
    events:
      - http:
          method: any
          path: restore
